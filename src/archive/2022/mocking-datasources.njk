---
layout: post
title: An in-memory jester in King Java's court
blurb: Say goodbye to long setup times in JUnit suites by mocking datasources with the H2 database engine. Easily apply SQL scripts, reset state between runs, and capture & test log output.
createdAt: '2022-05-09'
updatedAt: '2022-05-09'
path: /2022/mocking-datasources
tags: ['post', 'project']
---
<div class="row pb-4">
    <article class="col ms-2 ms-lg-0 pt-1 pt-md-3 ps-md-4 ps-lg-5">

        <div class="row">
            <div class="col-12 col-lg-10 mt-2 mt-md-0">
                <h1 class="display-3 mb-2">{{ title }}</h1>
                <p class="text-muted">Published on <span class="font-monospace">{{ updatedAt }}</span></p>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-8">

                <div class="alert alert-primary bg-white mb-4" role="alert">
                    <p class="h4"><i class="bi bi-stars me-1"></i> Summary</p>
                    <p class="content">The pursuit of test coverage must not detract from the Developer Experience. This guide shows how to speed up JUnit test suites by using the in-memory H2 database instead of brawnier options like PostgreSQL that are better suited for production.  </p>
                </div>

                <p class="content dropcap" style="--dropcap-url: url('/assets/img/dropcap/2022/mocking-datasources.svg');">
                    It is rare to come across someone who creates software for fun or profit that genuinely looks forward to writing tests. Perhaps some prudently heeded the wisdom of their elders and took to Test-Driven Development like ducks to water, but I admit the benefits of testing early & often had to be beaten into my workflow by the vicissitudes of botched deployments and after-hours rollbacks. That said, test coverage &mdash; which should remain a measure and never a goal &mdash; must not come at the expense of ergonomics. Long setup and teardown times are the first domino in a chain reaction that leads to impatience being distilled into cut corners, pipelines where tests are run selectively, and frustration in the long term.
                </p>
                <p class="content">
                    One of the most effective ways of reducing the reluctance towards writing tests and having suites run quickly is to prevent database operations from becoming a bottleneck. It is here that in-memory solutions truly shine. The present guide will walk you through integrating the embedded H2 database engine with your JUnit suite and harnessing it to speed up tests.
                </p>

                <div class="alert alert-primary bg-white mb-3" role="alert">
                    <p class="h4"><i class="bi bi-list-stars me-1"></i> Contents</p>
                    <ul class="content no-bullet m-0">
                        <li><a href="#prerequisites">Prerequisites</a></li>
                        <li><a href="#setup">Setup</a></li>
                        <li><a href="#create">Create an in-memory database</a></li>
                        <li><a href="#lifecycle">Manage the test life cycle</a></li>
                        <li><a href="#populate">Populate the test database</a></li>
                        <li><a href="#query">Query the database in tests</a></li>
                        <li><a href="#logging">Capture & test log output</a></li>
                    </ul>
                </div>

                <h2 id="prerequisites" class="mt-5"><a href="{{ page.url }}#prerequisites"><i class="bi bi-paragraph"></i></a> Prerequisites</h2>
                <p class="content">
                    You will need a Java application tested with JUnit, such as a web backend that uses the Spring framework. The real-life use case I will base this guide on is my experience adding H2 to the test suite for <a href="https://github.com/albertomh/Exodus" target="_blank" class="alert-link">Exodus <i class="bi bi-arrow-up-right-square-fill"></i></a>, an open-source migration runner I created to manage database changes in Spring applications.
                </p>

                <h2 id="setup" class="mt-5"><a href="{{ page.url }}#setup"><i class="bi bi-paragraph"></i></a> Setup</h2>
                <p class="content mb-2">
                    Add H2 as a dependency in your POM as shown below. Get the latest version number from <a href="https://mvnrepository.com/artifact/com.h2database/h2" target="_blank" class="alert-link">H2 on MavenRepository <i class="bi bi-arrow-up-right-square-fill"></i></a> and set the <code class="inline-code"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span></code> property accordingly.
                </p>
                <pre class="mb-4"><code class="hljs">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.h2database<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>h2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.212<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre>

                <h2 id="create" class="mt-5"><a href="{{ page.url }}#create"><i class="bi bi-paragraph"></i></a> Create an in-memory database</h2>
                <p class="content mb-2">
                    You will create a fresh in-memory database for each test suite, allowing it to be garbage collected at the end of each run. First, let's declare the objects you will inject into tests in order to mock the database:
                </p>
                <pre class="mb-4"><code class="hljs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTestSuite</span> {<br>    DataSource dataSource;<br>    Connection conn;<br>    Statement statement;</code></pre>
                <p class="content mb-2">
                    Next, create a constructor for your test suite (or modify the existing one) as such:
                </p>
                <pre class="mb-4"><code class="hljs"><span class="hljs-keyword">public</span> <span class="hljs-title function_">MyTestSuite</span><span class="hljs-params">()</span> {<br>    dataSource = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmbeddedDatabaseBuilder</span>().<span class="hljs-title function_">setType</span>(EmbeddedDatabaseType.H2).<span class="hljs-title function_">build</span>();<br>    <span class="hljs-keyword">try</span> {<br>        conn = dataSource.<span class="hljs-title function_">getConnection</span>();<br>        statement = conn.<span class="hljs-title function_">createStatement</span>();<br>    } <span class="hljs-keyword">catch</span> (SQLException e) {<br>        e.<span class="hljs-title function_">printStackTrace</span>();<br>    }<br>}</code></pre>
                <p class="content">
                    The embedded database is instantiated and assigned to <code class="inline-code text-white">dataSource</code> and the <code class="inline-code text-white">conn</code> & <code class="inline-code text-white">statement</code> objects are derived from it. The latter two will be passed to methods that run SQL statements on the database from your tests. This guide will later look at running arbitrary SQL as a string or from a file handled as a Spring Resource.
                </p>

                <h2 id="lifecycle" class="mt-5"><a href="{{ page.url }}#lifecycle"><i class="bi bi-paragraph"></i></a> Manage the test life cycle</h2>
                <p class="content">
                    Next, decorate the test suite class with <code class="inline-code text-white">@TestInstance(Lifecycle.PER_CLASS)</code>. This will ensure that JUnit runs all test methods within a suite against the same instance, avoiding the overhead of creating a datasource and related objects anew for each test method.
                </p>
                <p class="content mb-2">
                    However, this means that state is carried over between tests in the in-memory database, which would muddy the waters and stop tests from being independent from each other. In order to reset the database between test method runs you can create a method annotated with JUnit's <code class="inline-code"><span class="hljs-meta">@BeforeEach</span></code> decorator:
                </p>
                <pre class="mb-4"><code class="hljs"><span class="hljs-meta">@BeforeEach</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeEach</span><span class="hljs-params">()</span> {<br>    <span class="hljs-keyword">try</span> {<br>        statement.<span class="hljs-title function_">execute</span>(<span class="hljs-string">"DROP ALL OBJECTS;"</span>);<br>    } <span class="hljs-keyword">catch</span> (SQLException e) {<br>        e.<span class="hljs-title function_">printStackTrace</span>();<br>    }<br>}</code></pre>
                <p class="content">
                    H2 supports a special SQL statement <code class="inline-code text-white">DROP ALL OBJECTS</code> that will delete all existing tables, views, and schemas. An advantage of using this command as opposed to <code class="inline-code text-white">TRUNCATE TABLE</code> is that the former will also take care of resetting sequences (such as those of <code class="inline-code text-white">SERIAL</code> fields) with a negligible difference in performance.
                </p>
                <p class="content">
                    This guide will revisit the <code class="inline-code text-white"><span class="hljs-title function_">beforeEach</span>()</code> method later in order to capture and test log output.
                </p>

                <h2 id="populate" class="mt-5"><a href="{{ page.url }}#populate"><i class="bi bi-paragraph"></i></a> Populate the test database</h2>
                <p class="content">
                    There are two ways of interacting with the H2 database: by building a string containing SQL statements or, if using Spring, by applying a script stored as a Spring Resource. The first approach is to call <code class="inline-code text-white">statement.<span class="hljs-title function_">execute</span>(<span class="hljs-string">"..."</span>)</code> as you have already seen in <code class="inline-code text-white"><span class="hljs-title function_">beforeEach</span>()</code> above. Arbitrary SQL can be run in this way in order to construct schemas and populate them.
                <p class="content mb-2">
                    If using the Spring framework you may wish to move away from manually constructing SQL statements in your test code to storing more complex database scripts as separate files in order to avoid cluttering the JUnit suites. SQL scripts can be applied to the database in a test context as such:
                </p>
                <pre class="mb-4"><code class="hljs"><span class="hljs-keyword">import</span> org.springframework.jdbc.datasource.init.ScriptUtils;<br>[...]<br><span class="hljs-type">Resource</span> <span class="hljs-variable">sqlScript</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathResource</span>(<span class="hljs-string">"db/create_schema.sql"</span>);<br>ScriptUtils.<span class="hljs-title function_">executeSqlScript</span>(conn, sqlScript);</code></pre>
                <p class="content">
                    The path passed to <code class="inline-code text-white">ClassPathResource()</code> is relative to <code class="inline-code text-white">src/test/resources/</code>. By applying <span class="font-monospace">.sql</span> files in this manner you can quickly set up a test database's schema and fill it with data while keeping the resources to do so organised in a logical structure.
                </p>

                <div class="alert alert-primary bg-white mb-5">
                    <p class="h4"><i class="bi bi-info-circle-fill me-1"></i><em>Caveat emptor</em></p>
                    <p class="content m-0">Before using H2 familiarise yourself with the <a href="http://www.h2database.com/html/datatypes.html" target="_blank" class="alert-link">data types <i class="bi bi-arrow-up-right-square-fill"></i></a> it supports. While it is standards-compliant, watch out for discrepancies between types that may exist in the database engine used by your application but not so in H2. For instance, PostgreSQL's <strong>TEXT</strong> is not a type in H2, so an alternative schema that uses <strong>VARCHAR</strong> (equivalent under the hood) is necessary.</p>
                </div>

                <h2 id="query" class="mt-5"><a href="{{ page.url }}#query"><i class="bi bi-paragraph"></i></a> Query the database in tests</h2>
                <p class="content mb-2">
                    It is also possible to query the database and use the results in your tests. For instance, let's look at retrieving a list of names:
                <pre class="mb-4"><code class="hljs">ArrayList&lt;String&gt; names = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> statement.<span class="hljs-title function_">executeQuery</span>(<span class="hljs-string">"SELECT u.first_name FROM users u;"</span>);<br><span class="hljs-keyword">while</span> (result.next()) {<br>    names.<span class="hljs-title function_">add</span>(result.<span class="hljs-title function_">getString</span>(<span class="hljs-string">"first_name"</span>));<br>}</code></pre>
                <p class="content">
                    By creating a collection such as an empty ArrayList, executing a query, and looping through the results, you can add any data to the collection. The <code class="inline-code text-white">result.next()</code> instruction moves the cursor through the ResultSet until all rows have been exhausted (this is similar to looping through a generator in Python, if that is something you are familiar with). You can now use JUnit assertions against the <code class="inline-code text-white">names</code> ArrayList to test the result of this query.
                </p>

                <h2 id="logging" class="mt-5"><a href="{{ page.url }}#logging"><i class="bi bi-paragraph"></i></a> Capture & test log output</h2>
                <p class="content">
                    The following is not directly related to H2 or mocking databases, but rather a nugget you may find useful in order to test log output with JUnit. If using the Spring Boot starter the <code class="inline-code text-white">Logback</code> & <code class="inline-code text-white">SLF4J</code> dependencies will already be satisfied. Otherwise, add them to your POM.
                </p>
                <p class="content mb-2">
                    First, create a logger and a container to hold logging events as members of your test class:
                </p>
                <pre class="mb-4"><code class="hljs"><span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> (Logger) LoggerFactory.<span class="hljs-title function_">getLogger</span>(MigrationRunner.class);<br>List&lt;ILoggingEvent&gt; logList;</code></pre>
                <p class="content mb-2">
                    Now, return to the <code class="inline-code"><span class="hljs-title function_">beforeEach()</span></code> method:
                </p>
                <pre class="mb-4"><code class="hljs"><span class="hljs-meta">@BeforeEach</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeEach</span><span class="hljs-params">()</span> {<br>    [...]<br>    logger.<span class="hljs-title function_">detachAndStopAllAppenders</span>();<br>    ListAppender&lt;ILoggingEvent&gt; listAppender = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListAppender</span>&lt;&gt;();<br>    logger.<span class="hljs-title function_">addAppender</span>(listAppender);<br>    listAppender.<span class="hljs-title function_">start</span>();<br>    logList = listAppender.list;<br>}</code></pre>
                <p class="content">
                    Before each test method you should instantiate a <code class="inline-code text-white">ListAppender</code>, remove any existing appenders from the logger and attach the new one, directing this appender's output to <code class="inline-code text-white">logList</code>.
                </p>
                <p class="content mb-2">
                    Application code can be invoked as usual in test cases and the instrumentation you have just created will intercept it on the fly. You may test any log output as such:
                </p>
                <pre class="mb-4"><code class="hljs">assertEquals(<span class="hljs-number">2</span>, logList.<span class="hljs-title function_">size</span>());<br>assertEquals(<span class="hljs-string">"This is the first log message."</span>, logList.<span class="hljs-title function_">get</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">getMessage</span>());</code></pre>


                <p class="content mt-5 mb-2">
                    You have now:
                </p>
                <ul class="content">
                    <li>Sped up your JUnit tests by using an in-memory database.</li>
                    <li>Integrated H2 into your test life cycle with <code class="inline-code"><span class="hljs-meta">@BeforeEach</span></code> hooks.</li>
                    <li>Captured logs and tested them.</li>
                </ul>
                <p class="content end-acorn mb-5">
                    I hope this guide has been of service and has helped you reduce overhead in your test suites. If you want to see how all the above comes together in a real-life project &mdash; or are looking for a light (~7 kb) & simple migrations runner for your next Spring application &mdash; you should <a href="https://github.com/albertomh/Exodus" target="_blank" class="alert-link">check out Exodus on GitHub <i class="bi bi-arrow-up-right-square-fill"></i></a>.
                </p>

                <hr>
                <p class="text-muted small">
                    Main image made using Inkscape.
                    <br>
                    Dropcap background: <a href="https://www.rawpixel.com/image/496068/free-illustration-image-william-morris-pattern-flower" target="_blank"><em>Violet and Columbine</em> (1883)</a> by William Morris, licensed under CC0.
                </p>

            </div>
        </div>

    </article>
</div>
